import heapq

def a_star_search(graph, start, goal, heuristic):
    open_set = [(0 + heuristic(start, goal), start, [start])]  # (f_score, current_node, path)
    closed_set = set()
    
    while open_set:
        f_score, current, path = heapq.heappop(open_set)
        
        if current == goal:
            return path
        
        closed_set.add(current)
        
        for neighbor, cost in graph[current].items():
            if neighbor in closed_set:
                continue
            
            g_score = f_score - heuristic(current, goal) + cost
            h_score = heuristic(neighbor, goal)
            total_score = g_score + h_score
            
            heapq.heappush(open_set, (total_score, neighbor, path + [neighbor]))
    
    return None

# Graph Representation
graph = {
    1: {2: 2, 3: 4},
    2: {1: 2, 4: 1},
    3: {1: 4, 5: 3},
    4: {2: 1, 6: 5},
    5: {3: 3, 6: 2},
    6: {4: 5, 5: 2}
}

# Heuristic Function
def manhattan_distance(node, goal):
    return abs(node - goal)  # Simplified heuristic for abstract graph

# Input
start_node = 1
goal_node = 6

# Find Path
path = a_star_search(graph, start_node, goal_node, manhattan_distance)

# Output
if path:
    print("Shortest path:", path)
else:
    print("No path found.")
